package uk.ac.manchester.spirvproto.lib.assembler;

import java.util.HashSet;
import java.util.Set;
import javax.annotation.Generated;

@Generated("beehive-lab.spirv-proto.generator")
class SPIRVInstRecognizer {
    private final Set<String> instructions;

    public SPIRVInstRecognizer() {
        instructions = new HashSet<>(332);
        instructions.add("OpNop");
        instructions.add("OpUndef");
        instructions.add("OpSourceContinued");
        instructions.add("OpSource");
        instructions.add("OpSourceExtension");
        instructions.add("OpName");
        instructions.add("OpMemberName");
        instructions.add("OpString");
        instructions.add("OpLine");
        instructions.add("OpExtension");
        instructions.add("OpExtInstImport");
        instructions.add("OpExtInst");
        instructions.add("OpMemoryModel");
        instructions.add("OpEntryPoint");
        instructions.add("OpExecutionMode");
        instructions.add("OpCapability");
        instructions.add("OpTypeVoid");
        instructions.add("OpTypeBool");
        instructions.add("OpTypeInt");
        instructions.add("OpTypeFloat");
        instructions.add("OpTypeVector");
        instructions.add("OpTypeMatrix");
        instructions.add("OpTypeImage");
        instructions.add("OpTypeSampler");
        instructions.add("OpTypeSampledImage");
        instructions.add("OpTypeArray");
        instructions.add("OpTypeRuntimeArray");
        instructions.add("OpTypeStruct");
        instructions.add("OpTypeOpaque");
        instructions.add("OpTypePointer");
        instructions.add("OpTypeFunction");
        instructions.add("OpTypeEvent");
        instructions.add("OpTypeDeviceEvent");
        instructions.add("OpTypeReserveId");
        instructions.add("OpTypeQueue");
        instructions.add("OpTypePipe");
        instructions.add("OpTypeForwardPointer");
        instructions.add("OpConstantTrue");
        instructions.add("OpConstantFalse");
        instructions.add("OpConstant");
        instructions.add("OpConstantComposite");
        instructions.add("OpConstantSampler");
        instructions.add("OpConstantNull");
        instructions.add("OpSpecConstantTrue");
        instructions.add("OpSpecConstantFalse");
        instructions.add("OpSpecConstant");
        instructions.add("OpSpecConstantComposite");
        instructions.add("OpSpecConstantOp");
        instructions.add("OpFunction");
        instructions.add("OpFunctionParameter");
        instructions.add("OpFunctionEnd");
        instructions.add("OpFunctionCall");
        instructions.add("OpVariable");
        instructions.add("OpImageTexelPointer");
        instructions.add("OpLoad");
        instructions.add("OpStore");
        instructions.add("OpCopyMemory");
        instructions.add("OpCopyMemorySized");
        instructions.add("OpAccessChain");
        instructions.add("OpInBoundsAccessChain");
        instructions.add("OpPtrAccessChain");
        instructions.add("OpArrayLength");
        instructions.add("OpGenericPtrMemSemantics");
        instructions.add("OpInBoundsPtrAccessChain");
        instructions.add("OpDecorate");
        instructions.add("OpMemberDecorate");
        instructions.add("OpDecorationGroup");
        instructions.add("OpGroupDecorate");
        instructions.add("OpGroupMemberDecorate");
        instructions.add("OpVectorExtractDynamic");
        instructions.add("OpVectorInsertDynamic");
        instructions.add("OpVectorShuffle");
        instructions.add("OpCompositeConstruct");
        instructions.add("OpCompositeExtract");
        instructions.add("OpCompositeInsert");
        instructions.add("OpCopyObject");
        instructions.add("OpTranspose");
        instructions.add("OpSampledImage");
        instructions.add("OpImageSampleImplicitLod");
        instructions.add("OpImageSampleExplicitLod");
        instructions.add("OpImageSampleDrefImplicitLod");
        instructions.add("OpImageSampleDrefExplicitLod");
        instructions.add("OpImageSampleProjImplicitLod");
        instructions.add("OpImageSampleProjExplicitLod");
        instructions.add("OpImageSampleProjDrefImplicitLod");
        instructions.add("OpImageSampleProjDrefExplicitLod");
        instructions.add("OpImageFetch");
        instructions.add("OpImageGather");
        instructions.add("OpImageDrefGather");
        instructions.add("OpImageRead");
        instructions.add("OpImageWrite");
        instructions.add("OpImage");
        instructions.add("OpImageQueryFormat");
        instructions.add("OpImageQueryOrder");
        instructions.add("OpImageQuerySizeLod");
        instructions.add("OpImageQuerySize");
        instructions.add("OpImageQueryLod");
        instructions.add("OpImageQueryLevels");
        instructions.add("OpImageQuerySamples");
        instructions.add("OpConvertFToU");
        instructions.add("OpConvertFToS");
        instructions.add("OpConvertSToF");
        instructions.add("OpConvertUToF");
        instructions.add("OpUConvert");
        instructions.add("OpSConvert");
        instructions.add("OpFConvert");
        instructions.add("OpQuantizeToF16");
        instructions.add("OpConvertPtrToU");
        instructions.add("OpSatConvertSToU");
        instructions.add("OpSatConvertUToS");
        instructions.add("OpConvertUToPtr");
        instructions.add("OpPtrCastToGeneric");
        instructions.add("OpGenericCastToPtr");
        instructions.add("OpGenericCastToPtrExplicit");
        instructions.add("OpBitcast");
        instructions.add("OpSNegate");
        instructions.add("OpFNegate");
        instructions.add("OpIAdd");
        instructions.add("OpFAdd");
        instructions.add("OpISub");
        instructions.add("OpFSub");
        instructions.add("OpIMul");
        instructions.add("OpFMul");
        instructions.add("OpUDiv");
        instructions.add("OpSDiv");
        instructions.add("OpFDiv");
        instructions.add("OpUMod");
        instructions.add("OpSRem");
        instructions.add("OpSMod");
        instructions.add("OpFRem");
        instructions.add("OpFMod");
        instructions.add("OpVectorTimesScalar");
        instructions.add("OpMatrixTimesScalar");
        instructions.add("OpVectorTimesMatrix");
        instructions.add("OpMatrixTimesVector");
        instructions.add("OpMatrixTimesMatrix");
        instructions.add("OpOuterProduct");
        instructions.add("OpDot");
        instructions.add("OpIAddCarry");
        instructions.add("OpISubBorrow");
        instructions.add("OpUMulExtended");
        instructions.add("OpSMulExtended");
        instructions.add("OpAny");
        instructions.add("OpAll");
        instructions.add("OpIsNan");
        instructions.add("OpIsInf");
        instructions.add("OpIsFinite");
        instructions.add("OpIsNormal");
        instructions.add("OpSignBitSet");
        instructions.add("OpLessOrGreater");
        instructions.add("OpOrdered");
        instructions.add("OpUnordered");
        instructions.add("OpLogicalEqual");
        instructions.add("OpLogicalNotEqual");
        instructions.add("OpLogicalOr");
        instructions.add("OpLogicalAnd");
        instructions.add("OpLogicalNot");
        instructions.add("OpSelect");
        instructions.add("OpIEqual");
        instructions.add("OpINotEqual");
        instructions.add("OpUGreaterThan");
        instructions.add("OpSGreaterThan");
        instructions.add("OpUGreaterThanEqual");
        instructions.add("OpSGreaterThanEqual");
        instructions.add("OpULessThan");
        instructions.add("OpSLessThan");
        instructions.add("OpULessThanEqual");
        instructions.add("OpSLessThanEqual");
        instructions.add("OpFOrdEqual");
        instructions.add("OpFUnordEqual");
        instructions.add("OpFOrdNotEqual");
        instructions.add("OpFUnordNotEqual");
        instructions.add("OpFOrdLessThan");
        instructions.add("OpFUnordLessThan");
        instructions.add("OpFOrdGreaterThan");
        instructions.add("OpFUnordGreaterThan");
        instructions.add("OpFOrdLessThanEqual");
        instructions.add("OpFUnordLessThanEqual");
        instructions.add("OpFOrdGreaterThanEqual");
        instructions.add("OpFUnordGreaterThanEqual");
        instructions.add("OpShiftRightLogical");
        instructions.add("OpShiftRightArithmetic");
        instructions.add("OpShiftLeftLogical");
        instructions.add("OpBitwiseOr");
        instructions.add("OpBitwiseXor");
        instructions.add("OpBitwiseAnd");
        instructions.add("OpNot");
        instructions.add("OpBitFieldInsert");
        instructions.add("OpBitFieldSExtract");
        instructions.add("OpBitFieldUExtract");
        instructions.add("OpBitReverse");
        instructions.add("OpBitCount");
        instructions.add("OpDPdx");
        instructions.add("OpDPdy");
        instructions.add("OpFwidth");
        instructions.add("OpDPdxFine");
        instructions.add("OpDPdyFine");
        instructions.add("OpFwidthFine");
        instructions.add("OpDPdxCoarse");
        instructions.add("OpDPdyCoarse");
        instructions.add("OpFwidthCoarse");
        instructions.add("OpEmitVertex");
        instructions.add("OpEndPrimitive");
        instructions.add("OpEmitStreamVertex");
        instructions.add("OpEndStreamPrimitive");
        instructions.add("OpControlBarrier");
        instructions.add("OpMemoryBarrier");
        instructions.add("OpAtomicLoad");
        instructions.add("OpAtomicStore");
        instructions.add("OpAtomicExchange");
        instructions.add("OpAtomicCompareExchange");
        instructions.add("OpAtomicCompareExchangeWeak");
        instructions.add("OpAtomicIIncrement");
        instructions.add("OpAtomicIDecrement");
        instructions.add("OpAtomicIAdd");
        instructions.add("OpAtomicISub");
        instructions.add("OpAtomicSMin");
        instructions.add("OpAtomicUMin");
        instructions.add("OpAtomicSMax");
        instructions.add("OpAtomicUMax");
        instructions.add("OpAtomicAnd");
        instructions.add("OpAtomicOr");
        instructions.add("OpAtomicXor");
        instructions.add("OpPhi");
        instructions.add("OpLoopMerge");
        instructions.add("OpSelectionMerge");
        instructions.add("OpLabel");
        instructions.add("OpBranch");
        instructions.add("OpBranchConditional");
        instructions.add("OpSwitch");
        instructions.add("OpKill");
        instructions.add("OpReturn");
        instructions.add("OpReturnValue");
        instructions.add("OpUnreachable");
        instructions.add("OpLifetimeStart");
        instructions.add("OpLifetimeStop");
        instructions.add("OpGroupAsyncCopy");
        instructions.add("OpGroupWaitEvents");
        instructions.add("OpGroupAll");
        instructions.add("OpGroupAny");
        instructions.add("OpGroupBroadcast");
        instructions.add("OpGroupIAdd");
        instructions.add("OpGroupFAdd");
        instructions.add("OpGroupFMin");
        instructions.add("OpGroupUMin");
        instructions.add("OpGroupSMin");
        instructions.add("OpGroupFMax");
        instructions.add("OpGroupUMax");
        instructions.add("OpGroupSMax");
        instructions.add("OpReadPipe");
        instructions.add("OpWritePipe");
        instructions.add("OpReservedReadPipe");
        instructions.add("OpReservedWritePipe");
        instructions.add("OpReserveReadPipePackets");
        instructions.add("OpReserveWritePipePackets");
        instructions.add("OpCommitReadPipe");
        instructions.add("OpCommitWritePipe");
        instructions.add("OpIsValidReserveId");
        instructions.add("OpGetNumPipePackets");
        instructions.add("OpGetMaxPipePackets");
        instructions.add("OpGroupReserveReadPipePackets");
        instructions.add("OpGroupReserveWritePipePackets");
        instructions.add("OpGroupCommitReadPipe");
        instructions.add("OpGroupCommitWritePipe");
        instructions.add("OpEnqueueMarker");
        instructions.add("OpEnqueueKernel");
        instructions.add("OpGetKernelNDrangeSubGroupCount");
        instructions.add("OpGetKernelNDrangeMaxSubGroupSize");
        instructions.add("OpGetKernelWorkGroupSize");
        instructions.add("OpGetKernelPreferredWorkGroupSizeMultiple");
        instructions.add("OpRetainEvent");
        instructions.add("OpReleaseEvent");
        instructions.add("OpCreateUserEvent");
        instructions.add("OpIsValidEvent");
        instructions.add("OpSetUserEventStatus");
        instructions.add("OpCaptureEventProfilingInfo");
        instructions.add("OpGetDefaultQueue");
        instructions.add("OpBuildNDRange");
        instructions.add("OpImageSparseSampleImplicitLod");
        instructions.add("OpImageSparseSampleExplicitLod");
        instructions.add("OpImageSparseSampleDrefImplicitLod");
        instructions.add("OpImageSparseSampleDrefExplicitLod");
        instructions.add("OpImageSparseSampleProjImplicitLod");
        instructions.add("OpImageSparseSampleProjExplicitLod");
        instructions.add("OpImageSparseSampleProjDrefImplicitLod");
        instructions.add("OpImageSparseSampleProjDrefExplicitLod");
        instructions.add("OpImageSparseFetch");
        instructions.add("OpImageSparseGather");
        instructions.add("OpImageSparseDrefGather");
        instructions.add("OpImageSparseTexelsResident");
        instructions.add("OpNoLine");
        instructions.add("OpAtomicFlagTestAndSet");
        instructions.add("OpAtomicFlagClear");
        instructions.add("OpImageSparseRead");
        instructions.add("OpSizeOf");
        instructions.add("OpTypePipeStorage");
        instructions.add("OpConstantPipeStorage");
        instructions.add("OpCreatePipeFromPipeStorage");
        instructions.add("OpGetKernelLocalSizeForSubgroupCount");
        instructions.add("OpGetKernelMaxNumSubgroups");
        instructions.add("OpTypeNamedBarrier");
        instructions.add("OpNamedBarrierInitialize");
        instructions.add("OpMemoryNamedBarrier");
        instructions.add("OpModuleProcessed");
        instructions.add("OpExecutionModeId");
        instructions.add("OpDecorateId");
        instructions.add("OpSubgroupBallotKHR");
        instructions.add("OpSubgroupFirstInvocationKHR");
        instructions.add("OpSubgroupAllKHR");
        instructions.add("OpSubgroupAnyKHR");
        instructions.add("OpSubgroupAllEqualKHR");
        instructions.add("OpSubgroupReadInvocationKHR");
        instructions.add("OpGroupIAddNonUniformAMD");
        instructions.add("OpGroupFAddNonUniformAMD");
        instructions.add("OpGroupFMinNonUniformAMD");
        instructions.add("OpGroupUMinNonUniformAMD");
        instructions.add("OpGroupSMinNonUniformAMD");
        instructions.add("OpGroupFMaxNonUniformAMD");
        instructions.add("OpGroupUMaxNonUniformAMD");
        instructions.add("OpGroupSMaxNonUniformAMD");
        instructions.add("OpFragmentMaskFetchAMD");
        instructions.add("OpFragmentFetchAMD");
        instructions.add("OpSubgroupShuffleINTEL");
        instructions.add("OpSubgroupShuffleDownINTEL");
        instructions.add("OpSubgroupShuffleUpINTEL");
        instructions.add("OpSubgroupShuffleXorINTEL");
        instructions.add("OpSubgroupBlockReadINTEL");
        instructions.add("OpSubgroupBlockWriteINTEL");
        instructions.add("OpSubgroupImageBlockReadINTEL");
        instructions.add("OpSubgroupImageBlockWriteINTEL");
        instructions.add("OpDecorateStringGOOGLE");
        instructions.add("OpMemberDecorateStringGOOGLE");
    }

    public boolean isInstruction(String token) {
        return instructions.contains(token);
    }
}